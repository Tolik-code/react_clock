{"version":3,"sources":["App.js","index.js"],"names":["App","useState","sec","setSec","status","setStatus","useEffect","unsubscribe","Subject","interval","pipe","takeUntil","subscribe","val","next","complete","timeout","startTimer","React","useCallback","stopTimer","resetTimer","waitTimer","wasClicked","className","Date","toISOString","slice","type","onClick","clearTimeout","setTimeout","ReactDOM","render","document","getElementById"],"mappings":"wPAKaA,EAAM,WACjB,MAAsBC,mBAAS,GAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA4BF,mBAAS,QAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACR,IAAMC,EAAc,IAAIC,IAUxB,OARAC,YAAS,KACNC,KAAKC,YAAUJ,IACfK,WAAU,WACM,QAAXR,GACFD,GAAO,SAAAU,GAAG,OAAIA,EAAM,UAInB,WACLN,EAAYO,OACZP,EAAYQ,cAEb,CAACX,IAEJ,IAmBIY,EAnBEC,EAAaC,IAAMC,aAAY,WACnCd,EAAU,SACT,IAEGe,EAAYF,IAAMC,aAAY,WAClCd,EAAU,QACVF,EAAO,KACN,IAEGkB,EAAaH,IAAMC,aAAY,WACnChB,EAAO,GACPE,EAAU,SACT,IAEGiB,EAAYJ,IAAMC,aAAY,WAClCd,EAAU,UACT,IAECkB,GAAa,EAiBjB,OACE,yBAAKC,UAAU,SACb,8BACG,IAAIC,KAAKvB,GAAKwB,cAAcC,MAAM,GAAI,KAEzC,4BACEH,UAAU,gBACVI,KAAK,SACLC,QAASZ,GAHX,SAOA,4BAAQO,UAAU,gBAAgBI,KAAK,SAASC,QAAST,GAAzD,QAGA,4BACEI,UAAU,gBACVI,KAAK,SACLC,QAASR,GAHX,SAOA,4BACEG,UAAU,gBACVI,KAAK,SACLC,QAvCc,WAClB,GAAIN,EAIF,OAHAA,GAAa,EACbO,aAAad,GAENM,IAGTC,GAAa,EACbP,EAAUe,YAAW,WACnBR,GAAa,IACZ,OAyBD,UC/ENS,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.0907333d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport { interval, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nexport const App = () => {\n  const [sec, setSec] = useState(0);\n  const [status, setStatus] = useState('stop');\n\n  useEffect(() => {\n    const unsubscribe = new Subject();\n\n    interval(1000)\n      .pipe(takeUntil(unsubscribe))\n      .subscribe(() => {\n        if (status === 'run') {\n          setSec(val => val + 1000);\n        }\n      });\n\n    return () => {\n      unsubscribe.next();\n      unsubscribe.complete();\n    };\n  }, [status]);\n\n  const startTimer = React.useCallback(() => {\n    setStatus('run');\n  }, []);\n\n  const stopTimer = React.useCallback(() => {\n    setStatus('stop');\n    setSec(0);\n  }, []);\n\n  const resetTimer = React.useCallback(() => {\n    setSec(0);\n    setStatus('run');\n  }, []);\n\n  const waitTimer = React.useCallback(() => {\n    setStatus('wait');\n  }, []);\n\n  let wasClicked = false;\n  let timeout;\n\n  const waitDbClick = () => {\n    if (wasClicked) {\n      wasClicked = false;\n      clearTimeout(timeout);\n\n      return waitTimer();\n    }\n\n    wasClicked = true;\n    timeout = setTimeout(() => {\n      wasClicked = false;\n    }, 300);\n  };\n\n  return (\n    <div className=\"timer\">\n      <span>\n        {new Date(sec).toISOString().slice(11, 19)}\n      </span>\n      <button\n        className=\"timer__button\"\n        type=\"button\"\n        onClick={startTimer}\n      >\n        Start\n      </button>\n      <button className=\"timer__button\" type=\"button\" onClick={stopTimer}>\n        Stop\n      </button>\n      <button\n        className=\"timer__button\"\n        type=\"button\"\n        onClick={resetTimer}\n      >\n        Reset\n      </button>\n      <button\n        className=\"timer__button\"\n        type=\"button\"\n        onClick={waitDbClick}\n      >\n        Wait\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}